generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(uuid())
  login           String         @unique
  password        String
  chatsId         Chat[]
  createdProjects Project[]
  projects        Project[]      @relation("participants_projects")
  refreshTokens   RefreshToken[]
  roles           Role[]         @relation("role_connections")
  tasks           Task[]
  blocked         Boolean        @default(false)
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")

  @@map("users")
}

model Role {
  id           String   @id @default(uuid())
  name         Roles    @unique
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  descriptions String
  users        User[]   @relation("role_connections")

  @@map("roles")
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  tokenHash String   @unique @map("token_hash")
  revoked   Boolean
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])

  @@map("refresh_tokens")
}

model Project {
  id           String   @id @default(uuid())
  name         String
  creatorId    String   @map("creator_id")
  active       Boolean  @default(true)
  creator      User     @relation(fields: [creatorId], references: [id])
  participants User[]   @relation("participants_projects")
  tasks        Task[]
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("projects")
}

model Task {
  id         String     @id @default(uuid())
  name       String
  status     TaskStatus @default(IN_PROGRESS)
  deadline   DateTime?
  projectId  String     @map("project_id")
  project    Project    @relation(fields: [projectId], references: [id])
  executorId String     @map("executor_id")
  executor   User       @relation(fields: [executorId], references: [id])
  filePath   String?    @map("file_path")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")

  @@map("tasks")
}

model Chat {
  id        String   @id @default(uuid())
  message   String
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  filePath  String?  @map("file_path")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("chats")
}

enum Roles {
  USER
  ADMIN
}

enum TaskStatus {
  IN_REVIEW
  IN_PROGRESS
  DONE
}
