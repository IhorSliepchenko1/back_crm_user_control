generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  USER
  ADMIN
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

model Role {
  id          String   @id @default(uuid())
  name        Roles    @unique()
  descriptions String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  users       User[]   @relation("role_connections")

  @@map("roles")
}

model User {
  id        String    @id @default(uuid())
  login     String    @unique()
  password  String
  roles     Role[]    @relation("role_connections")
  projects  Project[]
  chatsId   Chat[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("users")
}

model Project {
  id String @id @default(uuid())

  name   String
  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")
  tasks  Task[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("projects")
}

model Task {
  id        String     @id @default(uuid())
  name      String
  status    TaskStatus @default(TODO)
  deadline  DateTime?
  project   Project    @relation(fields: [projectId], references: [id])
  projectId String     @map("project_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("tasks")
}

model Chat {
  id        String   @id @default(uuid())
  message   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  filePath  String?  @map("file_path")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("chats")
}
